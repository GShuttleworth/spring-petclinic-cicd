# This workflow runs maven tests, builds a Petclinic docker image using maven build, tags the docker image, uploads the image to Artifactory, and scans the image using X-Ray
name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
      tags:
        description: 'Test scenario tags'
        required: false
        type: boolean
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

jobs:
  test-build-publish:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v4
     
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
     
      - name: Run Maven Tests (Unit & Integration)
        run: mvn --batch-mode --update-snapshots verify     
     
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.ARTIFACTORY_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: gshuttleworth.jfrog.io/gshuttleworth-docker/spring-petclinic-cicd-image:${{ github.run_number }}
        run: |
          # jf docker build -t $IMAGE_NAME .
          ./mvnw spring-boot:build-image -D spring-boot.build-image.imageName=$IMAGE_NAME
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: spring-petclinic-cicd
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
      
      - name: Scan image using X-Ray
        env:
          IMAGE_NAME: gshuttleworth.jfrog.io/gshuttleworth-docker/spring-petclinic-cicd-image:${{ github.run_number }}
        run: jf docker scan $IMAGE_NAME